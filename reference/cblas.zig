pub const CblasRowMajor = enum_CBLAS_ORDER.CblasRowMajor;
pub const CblasColMajor = enum_CBLAS_ORDER.CblasColMajor;
pub const enum_CBLAS_ORDER = extern enum {
    CblasRowMajor = 101,
    CblasColMajor = 102,
};
pub const CblasNoTrans = enum_CBLAS_TRANSPOSE.CblasNoTrans;
pub const CblasTrans = enum_CBLAS_TRANSPOSE.CblasTrans;
pub const CblasConjTrans = enum_CBLAS_TRANSPOSE.CblasConjTrans;
pub const AtlasConj = enum_CBLAS_TRANSPOSE.AtlasConj;
pub const enum_CBLAS_TRANSPOSE = extern enum {
    CblasNoTrans = 111,
    CblasTrans = 112,
    CblasConjTrans = 113,
    AtlasConj = 114,
};
pub const CblasUpper = enum_CBLAS_UPLO.CblasUpper;
pub const CblasLower = enum_CBLAS_UPLO.CblasLower;
pub const enum_CBLAS_UPLO = extern enum {
    CblasUpper = 121,
    CblasLower = 122,
};
pub const CblasNonUnit = enum_CBLAS_DIAG.CblasNonUnit;
pub const CblasUnit = enum_CBLAS_DIAG.CblasUnit;
pub const enum_CBLAS_DIAG = extern enum {
    CblasNonUnit = 131,
    CblasUnit = 132,
};
pub const CblasLeft = enum_CBLAS_SIDE.CblasLeft;
pub const CblasRight = enum_CBLAS_SIDE.CblasRight;
pub const enum_CBLAS_SIDE = extern enum {
    CblasLeft = 141,
    CblasRight = 142,
};
pub extern fn cblas_errprn(ierr: c_int, info: c_int, form: ?[*]u8) c_int;
pub extern fn cblas_xerbla(p: c_int, rout: ?[*]const u8, form: ?[*]const u8) void;
pub extern fn cblas_sdsdot(N: c_int, alpha: f32, X: ?[*]const f32, incX: c_int, Y: ?[*]const f32, incY: c_int) f32;
pub extern fn cblas_dsdot(N: c_int, X: ?[*]const f32, incX: c_int, Y: ?[*]const f32, incY: c_int) f64;
pub extern fn cblas_sdot(N: c_int, X: ?[*]const f32, incX: c_int, Y: ?[*]const f32, incY: c_int) f32;
pub extern fn cblas_ddot(N: c_int, X: ?[*]const f64, incX: c_int, Y: ?[*]const f64, incY: c_int) f64;
pub extern fn cblas_cdotu_sub(N: c_int, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, dotu: ?*c_void) void;
pub extern fn cblas_cdotc_sub(N: c_int, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, dotc: ?*c_void) void;
pub extern fn cblas_zdotu_sub(N: c_int, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, dotu: ?*c_void) void;
pub extern fn cblas_zdotc_sub(N: c_int, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, dotc: ?*c_void) void;
pub extern fn cblas_snrm2(N: c_int, X: ?[*]const f32, incX: c_int) f32;
pub extern fn cblas_sasum(N: c_int, X: ?[*]const f32, incX: c_int) f32;
pub extern fn cblas_dnrm2(N: c_int, X: ?[*]const f64, incX: c_int) f64;
pub extern fn cblas_dasum(N: c_int, X: ?[*]const f64, incX: c_int) f64;
pub extern fn cblas_scnrm2(N: c_int, X: ?*const c_void, incX: c_int) f32;
pub extern fn cblas_scasum(N: c_int, X: ?*const c_void, incX: c_int) f32;
pub extern fn cblas_dznrm2(N: c_int, X: ?*const c_void, incX: c_int) f64;
pub extern fn cblas_dzasum(N: c_int, X: ?*const c_void, incX: c_int) f64;
pub extern fn cblas_isamax(N: c_int, X: ?[*]const f32, incX: c_int) c_int;
pub extern fn cblas_idamax(N: c_int, X: ?[*]const f64, incX: c_int) c_int;
pub extern fn cblas_icamax(N: c_int, X: ?*const c_void, incX: c_int) c_int;
pub extern fn cblas_izamax(N: c_int, X: ?*const c_void, incX: c_int) c_int;
pub extern fn cblas_sswap(N: c_int, X: ?[*]f32, incX: c_int, Y: ?[*]f32, incY: c_int) void;
pub extern fn cblas_scopy(N: c_int, X: ?[*]const f32, incX: c_int, Y: ?[*]f32, incY: c_int) void;
pub extern fn cblas_saxpy(N: c_int, alpha: f32, X: ?[*]const f32, incX: c_int, Y: ?[*]f32, incY: c_int) void;
pub extern fn catlas_saxpby(N: c_int, alpha: f32, X: ?[*]const f32, incX: c_int, beta: f32, Y: ?[*]f32, incY: c_int) void;
pub extern fn catlas_sset(N: c_int, alpha: f32, X: ?[*]f32, incX: c_int) void;
pub extern fn cblas_dswap(N: c_int, X: ?[*]f64, incX: c_int, Y: ?[*]f64, incY: c_int) void;
pub extern fn cblas_dcopy(N: c_int, X: ?[*]const f64, incX: c_int, Y: ?[*]f64, incY: c_int) void;
pub extern fn cblas_daxpy(N: c_int, alpha: f64, X: ?[*]const f64, incX: c_int, Y: ?[*]f64, incY: c_int) void;
pub extern fn catlas_daxpby(N: c_int, alpha: f64, X: ?[*]const f64, incX: c_int, beta: f64, Y: ?[*]f64, incY: c_int) void;
pub extern fn catlas_dset(N: c_int, alpha: f64, X: ?[*]f64, incX: c_int) void;
pub extern fn cblas_cswap(N: c_int, X: ?*c_void, incX: c_int, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_ccopy(N: c_int, X: ?*const c_void, incX: c_int, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_caxpy(N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, Y: ?*c_void, incY: c_int) void;
pub extern fn catlas_caxpby(N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn catlas_cset(N: c_int, alpha: ?*const c_void, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_zswap(N: c_int, X: ?*c_void, incX: c_int, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_zcopy(N: c_int, X: ?*const c_void, incX: c_int, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_zaxpy(N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, Y: ?*c_void, incY: c_int) void;
pub extern fn catlas_zaxpby(N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn catlas_zset(N: c_int, alpha: ?*const c_void, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_srotg(a: ?[*]f32, b: ?[*]f32, c: ?[*]f32, s: ?[*]f32) void;
pub extern fn cblas_srotmg(d1: ?[*]f32, d2: ?[*]f32, b1: ?[*]f32, b2: f32, P: ?[*]f32) void;
pub extern fn cblas_srot(N: c_int, X: ?[*]f32, incX: c_int, Y: ?[*]f32, incY: c_int, c: f32, s: f32) void;
pub extern fn cblas_srotm(N: c_int, X: ?[*]f32, incX: c_int, Y: ?[*]f32, incY: c_int, P: ?[*]const f32) void;
pub extern fn cblas_drotg(a: ?[*]f64, b: ?[*]f64, c: ?[*]f64, s: ?[*]f64) void;
pub extern fn cblas_drotmg(d1: ?[*]f64, d2: ?[*]f64, b1: ?[*]f64, b2: f64, P: ?[*]f64) void;
pub extern fn cblas_drot(N: c_int, X: ?[*]f64, incX: c_int, Y: ?[*]f64, incY: c_int, c: f64, s: f64) void;
pub extern fn cblas_drotm(N: c_int, X: ?[*]f64, incX: c_int, Y: ?[*]f64, incY: c_int, P: ?[*]const f64) void;
pub extern fn cblas_sscal(N: c_int, alpha: f32, X: ?[*]f32, incX: c_int) void;
pub extern fn cblas_dscal(N: c_int, alpha: f64, X: ?[*]f64, incX: c_int) void;
pub extern fn cblas_cscal(N: c_int, alpha: ?*const c_void, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_zscal(N: c_int, alpha: ?*const c_void, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_csscal(N: c_int, alpha: f32, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_zdscal(N: c_int, alpha: f64, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_crotg(a: ?*c_void, b: ?*c_void, c: ?*c_void, s: ?*c_void) void;
pub extern fn cblas_zrotg(a: ?*c_void, b: ?*c_void, c: ?*c_void, s: ?*c_void) void;
pub extern fn cblas_csrot(N: c_int, X: ?*c_void, incX: c_int, Y: ?*c_void, incY: c_int, c: f32, s: f32) void;
pub extern fn cblas_zdrot(N: c_int, X: ?*c_void, incX: c_int, Y: ?*c_void, incY: c_int, c: f64, s: f64) void;
pub extern fn cblas_sgemv(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, alpha: f32, A: ?[*]const f32, lda: c_int, X: ?[*]const f32, incX: c_int, beta: f32, Y: ?[*]f32, incY: c_int) void;
pub extern fn cblas_sgbmv(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, KL: c_int, KU: c_int, alpha: f32, A: ?[*]const f32, lda: c_int, X: ?[*]const f32, incX: c_int, beta: f32, Y: ?[*]f32, incY: c_int) void;
pub extern fn cblas_strmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, A: ?[*]const f32, lda: c_int, X: ?[*]f32, incX: c_int) void;
pub extern fn cblas_stbmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, K: c_int, A: ?[*]const f32, lda: c_int, X: ?[*]f32, incX: c_int) void;
pub extern fn cblas_stpmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, Ap: ?[*]const f32, X: ?[*]f32, incX: c_int) void;
pub extern fn cblas_strsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, A: ?[*]const f32, lda: c_int, X: ?[*]f32, incX: c_int) void;
pub extern fn cblas_stbsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, K: c_int, A: ?[*]const f32, lda: c_int, X: ?[*]f32, incX: c_int) void;
pub extern fn cblas_stpsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, Ap: ?[*]const f32, X: ?[*]f32, incX: c_int) void;
pub extern fn cblas_dgemv(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, alpha: f64, A: ?[*]const f64, lda: c_int, X: ?[*]const f64, incX: c_int, beta: f64, Y: ?[*]f64, incY: c_int) void;
pub extern fn cblas_dgbmv(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, KL: c_int, KU: c_int, alpha: f64, A: ?[*]const f64, lda: c_int, X: ?[*]const f64, incX: c_int, beta: f64, Y: ?[*]f64, incY: c_int) void;
pub extern fn cblas_dtrmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, A: ?[*]const f64, lda: c_int, X: ?[*]f64, incX: c_int) void;
pub extern fn cblas_dtbmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, K: c_int, A: ?[*]const f64, lda: c_int, X: ?[*]f64, incX: c_int) void;
pub extern fn cblas_dtpmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, Ap: ?[*]const f64, X: ?[*]f64, incX: c_int) void;
pub extern fn cblas_dtrsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, A: ?[*]const f64, lda: c_int, X: ?[*]f64, incX: c_int) void;
pub extern fn cblas_dtbsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, K: c_int, A: ?[*]const f64, lda: c_int, X: ?[*]f64, incX: c_int) void;
pub extern fn cblas_dtpsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, Ap: ?[*]const f64, X: ?[*]f64, incX: c_int) void;
pub extern fn cblas_cgemv(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_cgbmv(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, KL: c_int, KU: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_ctrmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, A: ?*const c_void, lda: c_int, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ctbmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, K: c_int, A: ?*const c_void, lda: c_int, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ctpmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, Ap: ?*const c_void, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ctrsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, A: ?*const c_void, lda: c_int, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ctbsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, K: c_int, A: ?*const c_void, lda: c_int, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ctpsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, Ap: ?*const c_void, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_zgemv(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_zgbmv(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, KL: c_int, KU: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_ztrmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, A: ?*const c_void, lda: c_int, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ztbmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, K: c_int, A: ?*const c_void, lda: c_int, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ztpmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, Ap: ?*const c_void, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ztrsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, A: ?*const c_void, lda: c_int, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ztbsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, K: c_int, A: ?*const c_void, lda: c_int, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ztpsv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, N: c_int, Ap: ?*const c_void, X: ?*c_void, incX: c_int) void;
pub extern fn cblas_ssymv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f32, A: ?[*]const f32, lda: c_int, X: ?[*]const f32, incX: c_int, beta: f32, Y: ?[*]f32, incY: c_int) void;
pub extern fn cblas_ssbmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, K: c_int, alpha: f32, A: ?[*]const f32, lda: c_int, X: ?[*]const f32, incX: c_int, beta: f32, Y: ?[*]f32, incY: c_int) void;
pub extern fn cblas_sspmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f32, Ap: ?[*]const f32, X: ?[*]const f32, incX: c_int, beta: f32, Y: ?[*]f32, incY: c_int) void;
pub extern fn cblas_sger(Order: enum_CBLAS_ORDER, M: c_int, N: c_int, alpha: f32, X: ?[*]const f32, incX: c_int, Y: ?[*]const f32, incY: c_int, A: ?[*]f32, lda: c_int) void;
pub extern fn cblas_ssyr(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f32, X: ?[*]const f32, incX: c_int, A: ?[*]f32, lda: c_int) void;
pub extern fn cblas_sspr(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f32, X: ?[*]const f32, incX: c_int, Ap: ?[*]f32) void;
pub extern fn cblas_ssyr2(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f32, X: ?[*]const f32, incX: c_int, Y: ?[*]const f32, incY: c_int, A: ?[*]f32, lda: c_int) void;
pub extern fn cblas_sspr2(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f32, X: ?[*]const f32, incX: c_int, Y: ?[*]const f32, incY: c_int, A: ?[*]f32) void;
pub extern fn cblas_dsymv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f64, A: ?[*]const f64, lda: c_int, X: ?[*]const f64, incX: c_int, beta: f64, Y: ?[*]f64, incY: c_int) void;
pub extern fn cblas_dsbmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, K: c_int, alpha: f64, A: ?[*]const f64, lda: c_int, X: ?[*]const f64, incX: c_int, beta: f64, Y: ?[*]f64, incY: c_int) void;
pub extern fn cblas_dspmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f64, Ap: ?[*]const f64, X: ?[*]const f64, incX: c_int, beta: f64, Y: ?[*]f64, incY: c_int) void;
pub extern fn cblas_dger(Order: enum_CBLAS_ORDER, M: c_int, N: c_int, alpha: f64, X: ?[*]const f64, incX: c_int, Y: ?[*]const f64, incY: c_int, A: ?[*]f64, lda: c_int) void;
pub extern fn cblas_dsyr(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f64, X: ?[*]const f64, incX: c_int, A: ?[*]f64, lda: c_int) void;
pub extern fn cblas_dspr(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f64, X: ?[*]const f64, incX: c_int, Ap: ?[*]f64) void;
pub extern fn cblas_dsyr2(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f64, X: ?[*]const f64, incX: c_int, Y: ?[*]const f64, incY: c_int, A: ?[*]f64, lda: c_int) void;
pub extern fn cblas_dspr2(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f64, X: ?[*]const f64, incX: c_int, Y: ?[*]const f64, incY: c_int, A: ?[*]f64) void;
pub extern fn cblas_chemv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_chbmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, K: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_chpmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: ?*const c_void, Ap: ?*const c_void, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_cgeru(Order: enum_CBLAS_ORDER, M: c_int, N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, A: ?*c_void, lda: c_int) void;
pub extern fn cblas_cgerc(Order: enum_CBLAS_ORDER, M: c_int, N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, A: ?*c_void, lda: c_int) void;
pub extern fn cblas_cher(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f32, X: ?*const c_void, incX: c_int, A: ?*c_void, lda: c_int) void;
pub extern fn cblas_chpr(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f32, X: ?*const c_void, incX: c_int, A: ?*c_void) void;
pub extern fn cblas_cher2(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, A: ?*c_void, lda: c_int) void;
pub extern fn cblas_chpr2(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, Ap: ?*c_void) void;
pub extern fn cblas_zhemv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_zhbmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, K: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_zhpmv(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: ?*const c_void, Ap: ?*const c_void, X: ?*const c_void, incX: c_int, beta: ?*const c_void, Y: ?*c_void, incY: c_int) void;
pub extern fn cblas_zgeru(Order: enum_CBLAS_ORDER, M: c_int, N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, A: ?*c_void, lda: c_int) void;
pub extern fn cblas_zgerc(Order: enum_CBLAS_ORDER, M: c_int, N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, A: ?*c_void, lda: c_int) void;
pub extern fn cblas_zher(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f64, X: ?*const c_void, incX: c_int, A: ?*c_void, lda: c_int) void;
pub extern fn cblas_zhpr(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: f64, X: ?*const c_void, incX: c_int, A: ?*c_void) void;
pub extern fn cblas_zher2(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, A: ?*c_void, lda: c_int) void;
pub extern fn cblas_zhpr2(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, N: c_int, alpha: ?*const c_void, X: ?*const c_void, incX: c_int, Y: ?*const c_void, incY: c_int, Ap: ?*c_void) void;
pub extern fn cblas_sgemm(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, TransB: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, K: c_int, alpha: f32, A: ?[*]const f32, lda: c_int, B: ?[*]const f32, ldb: c_int, beta: f32, C: ?[*]f32, ldc: c_int) void;
pub extern fn cblas_ssymm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, M: c_int, N: c_int, alpha: f32, A: ?[*]const f32, lda: c_int, B: ?[*]const f32, ldb: c_int, beta: f32, C: ?[*]f32, ldc: c_int) void;
pub extern fn cblas_ssyrk(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: f32, A: ?[*]const f32, lda: c_int, beta: f32, C: ?[*]f32, ldc: c_int) void;
pub extern fn cblas_ssyr2k(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: f32, A: ?[*]const f32, lda: c_int, B: ?[*]const f32, ldb: c_int, beta: f32, C: ?[*]f32, ldc: c_int) void;
pub extern fn cblas_strmm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, M: c_int, N: c_int, alpha: f32, A: ?[*]const f32, lda: c_int, B: ?[*]f32, ldb: c_int) void;
pub extern fn cblas_strsm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, M: c_int, N: c_int, alpha: f32, A: ?[*]const f32, lda: c_int, B: ?[*]f32, ldb: c_int) void;
pub extern fn cblas_dgemm(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, TransB: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, K: c_int, alpha: f64, A: ?[*]const f64, lda: c_int, B: ?[*]const f64, ldb: c_int, beta: f64, C: ?[*]f64, ldc: c_int) void;
pub extern fn cblas_dsymm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, M: c_int, N: c_int, alpha: f64, A: ?[*]const f64, lda: c_int, B: ?[*]const f64, ldb: c_int, beta: f64, C: ?[*]f64, ldc: c_int) void;
pub extern fn cblas_dsyrk(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: f64, A: ?[*]const f64, lda: c_int, beta: f64, C: ?[*]f64, ldc: c_int) void;
pub extern fn cblas_dsyr2k(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: f64, A: ?[*]const f64, lda: c_int, B: ?[*]const f64, ldb: c_int, beta: f64, C: ?[*]f64, ldc: c_int) void;
pub extern fn cblas_dtrmm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, M: c_int, N: c_int, alpha: f64, A: ?[*]const f64, lda: c_int, B: ?[*]f64, ldb: c_int) void;
pub extern fn cblas_dtrsm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, M: c_int, N: c_int, alpha: f64, A: ?[*]const f64, lda: c_int, B: ?[*]f64, ldb: c_int) void;
pub extern fn cblas_cgemm(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, TransB: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, K: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*const c_void, ldb: c_int, beta: ?*const c_void, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_csymm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, M: c_int, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*const c_void, ldb: c_int, beta: ?*const c_void, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_csyrk(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, beta: ?*const c_void, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_csyr2k(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*const c_void, ldb: c_int, beta: ?*const c_void, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_ctrmm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, M: c_int, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*c_void, ldb: c_int) void;
pub extern fn cblas_ctrsm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, M: c_int, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*c_void, ldb: c_int) void;
pub extern fn cblas_zgemm(Order: enum_CBLAS_ORDER, TransA: enum_CBLAS_TRANSPOSE, TransB: enum_CBLAS_TRANSPOSE, M: c_int, N: c_int, K: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*const c_void, ldb: c_int, beta: ?*const c_void, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_zsymm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, M: c_int, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*const c_void, ldb: c_int, beta: ?*const c_void, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_zsyrk(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, beta: ?*const c_void, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_zsyr2k(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*const c_void, ldb: c_int, beta: ?*const c_void, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_ztrmm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, M: c_int, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*c_void, ldb: c_int) void;
pub extern fn cblas_ztrsm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, TransA: enum_CBLAS_TRANSPOSE, Diag: enum_CBLAS_DIAG, M: c_int, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*c_void, ldb: c_int) void;
pub extern fn cblas_chemm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, M: c_int, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*const c_void, ldb: c_int, beta: ?*const c_void, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_cherk(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: f32, A: ?*const c_void, lda: c_int, beta: f32, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_cher2k(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*const c_void, ldb: c_int, beta: f32, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_zhemm(Order: enum_CBLAS_ORDER, Side: enum_CBLAS_SIDE, Uplo: enum_CBLAS_UPLO, M: c_int, N: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*const c_void, ldb: c_int, beta: ?*const c_void, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_zherk(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: f64, A: ?*const c_void, lda: c_int, beta: f64, C: ?*c_void, ldc: c_int) void;
pub extern fn cblas_zher2k(Order: enum_CBLAS_ORDER, Uplo: enum_CBLAS_UPLO, Trans: enum_CBLAS_TRANSPOSE, N: c_int, K: c_int, alpha: ?*const c_void, A: ?*const c_void, lda: c_int, B: ?*const c_void, ldb: c_int, beta: f64, C: ?*c_void, ldc: c_int) void;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const __FLT16_MAX_EXP__ = 15;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const __SIZEOF_FLOAT__ = 4;
pub const __INT64_FMTd__ = c"ld";
pub const __STDC_VERSION__ = c_long(201112);
pub const __INT_LEAST32_FMTi__ = c"i";
pub const __INT_LEAST8_FMTi__ = c"hhi";
pub const __LDBL_EPSILON__ = 0.000000;
pub const __INT_LEAST32_FMTd__ = c"d";
pub const __STDC_UTF_32__ = 1;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const __UINT_FAST64_FMTX__ = c"lX";
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __clang_version__ = c"7.0.0 (tags/RELEASE_700/final)";
pub const __UINT_LEAST8_FMTo__ = c"hho";
pub const __SIZEOF_DOUBLE__ = 8;
pub const __INTMAX_FMTd__ = c"ld";
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __INT_LEAST16_FMTi__ = c"hi";
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __MMX__ = 1;
pub const __SIZE_FMTX__ = c"lX";
pub const __WCHAR_WIDTH__ = 32;
pub const __PTRDIFF_FMTd__ = c"ld";
pub const __DBL_MIN_EXP__ = -1021;
pub const __FLT_EVAL_METHOD__ = 0;
pub const __SSE_MATH__ = 1;
pub const __UINT_FAST8_FMTo__ = c"hho";
pub const __UINT_LEAST64_MAX__ = c_ulong(18446744073709551615);
pub const __UINT_LEAST64_FMTx__ = c"lx";
pub const __INT8_MAX__ = 127;
pub const __DBL_HAS_DENORM__ = 1;
pub const __FLOAT128__ = 1;
pub const __FLT16_HAS_QUIET_NAN__ = 1;
pub const __ATOMIC_RELAXED = 0;
pub const __DBL_DECIMAL_DIG__ = 17;
pub const __SIZEOF_SHORT__ = 2;
pub const __UINT16_FMTX__ = c"hX";
pub const __UINT_FAST16_MAX__ = 65535;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const __WINT_MAX__ = c_uint(4294967295);
pub const __LDBL_MAX_EXP__ = 16384;
pub const __NO_MATH_INLINES = 1;
pub const __WCHAR_TYPE__ = int;
pub const __LONG_MAX__ = c_long(9223372036854775807);
pub const __STDC_HOSTED__ = 1;
pub const __INT_FAST16_FMTi__ = c"hi";
pub const __PTRDIFF_WIDTH__ = 64;
pub const __INT_LEAST32_TYPE__ = int;
pub const __SCHAR_MAX__ = 127;
pub const __LDBL_DENORM_MIN__ = 0.000000;
pub const __FLT16_MIN_EXP__ = -14;
pub const CBLAS_INDEX = int;
pub const __INT64_C_SUFFIX__ = L;
pub const __ELF__ = 1;
pub const __LDBL_MANT_DIG__ = 64;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const __UINT64_FMTX__ = c"lX";
pub const __UINT64_MAX__ = c_ulong(18446744073709551615);
pub const __DBL_MANT_DIG__ = 53;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __DBL_DIG__ = 15;
pub const __ATOMIC_ACQUIRE = 2;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const __FLT16_HAS_DENORM__ = 1;
pub const __UINT_FAST16_FMTu__ = c"hu";
pub const __INTPTR_FMTi__ = c"li";
pub const __UINT_FAST8_FMTX__ = c"hhX";
pub const __LITTLE_ENDIAN__ = 1;
pub const __SSE__ = 1;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const __SIZEOF_SIZE_T__ = 8;
pub const __UINT_LEAST16_FMTo__ = c"ho";
pub const __UINT8_FMTo__ = c"hho";
pub const __UINT_LEAST16_FMTx__ = c"hx";
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __UINT_FAST16_FMTX__ = c"hX";
pub const __VERSION__ = c"4.2.1 Compatible Clang 7.0.0 (tags/RELEASE_700/final)";
pub const __UINT_FAST32_FMTx__ = c"x";
pub const __UINTPTR_MAX__ = c_ulong(18446744073709551615);
pub const __UINT_FAST8_FMTu__ = c"hhu";
pub const __UINT_LEAST8_FMTu__ = c"hhu";
pub const __UINT_LEAST64_FMTo__ = c"lo";
pub const __UINT_LEAST8_MAX__ = 255;
pub const __SIZEOF_WCHAR_T__ = 4;
pub const __LDBL_MAX__ = inf;
pub const __UINT16_MAX__ = 65535;
pub const _LP64 = 1;
pub const __x86_64 = 1;
pub const linux = 1;
pub const __SIZEOF_WINT_T__ = 4;
pub const __UINTMAX_FMTo__ = c"lo";
pub const __FLT_DIG__ = 6;
pub const __UINT_LEAST8_FMTX__ = c"hhX";
pub const __INT16_MAX__ = 32767;
pub const __WINT_UNSIGNED__ = 1;
pub const __FLT_MAX_10_EXP__ = 38;
pub const __UINTPTR_FMTX__ = c"lX";
pub const __UINT_LEAST16_FMTu__ = c"hu";
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __WINT_WIDTH__ = 32;
pub const __SHRT_MAX__ = 32767;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __POINTER_WIDTH__ = 64;
pub const __PTRDIFF_MAX__ = c_long(9223372036854775807);
pub const __INT32_FMTd__ = c"d";
pub const __FLT16_DIG__ = 3;
pub const __DBL_MIN__ = 0.000000;
pub const __SIZEOF_LONG__ = 8;
pub const __INTPTR_WIDTH__ = 64;
pub const __FLT16_MAX_10_EXP__ = 4;
pub const __INT_FAST32_TYPE__ = int;
pub const __NO_INLINE__ = 1;
pub const __UINT_FAST32_FMTX__ = c"X";
pub const __gnu_linux__ = 1;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const __UINTMAX_FMTu__ = c"lu";
pub const __FLT_RADIX__ = 2;
pub const __FLT16_HAS_INFINITY__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const __FLT16_DECIMAL_DIG__ = 5;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const __INT_FAST8_FMTd__ = c"hhd";
pub const __INT32_TYPE__ = int;
pub const __UINTMAX_WIDTH__ = 64;
pub const __FLT_MIN__ = 0.000000;
pub const __INT64_FMTi__ = c"li";
pub const __UINT_FAST64_FMTu__ = c"lu";
pub const __INT8_FMTd__ = c"hhd";
pub const __INT_FAST16_TYPE__ = short;
pub const __FLT_MAX_EXP__ = 128;
pub const __DBL_MAX_10_EXP__ = 308;
pub const __LDBL_MIN__ = 0.000000;
pub const __INT_FAST64_FMTi__ = c"li";
pub const __INT_LEAST8_FMTd__ = c"hhd";
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __UINT_LEAST32_FMTX__ = c"X";
pub const __UINTMAX_MAX__ = c_ulong(18446744073709551615);
pub const __UINT_FAST16_FMTo__ = c"ho";
pub const __LDBL_DECIMAL_DIG__ = 21;
pub const __UINT_LEAST64_FMTX__ = c"lX";
pub const __clang_minor__ = 0;
pub const __SIZEOF_FLOAT128__ = 16;
pub const __UINT_FAST64_FMTo__ = c"lo";
pub const __SIZE_FMTx__ = c"lx";
pub const __DBL_MAX__ = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878;
pub const __DBL_EPSILON__ = 0.000000;
pub const __UINT64_FMTx__ = c"lx";
pub const __CHAR_BIT__ = 8;
pub const __INT16_FMTi__ = c"hi";
pub const _DEBUG = 1;
pub const __GNUC_MINOR__ = 2;
pub const __UINT_FAST32_MAX__ = c_uint(4294967295);
pub const __UINT8_FMTX__ = c"hhX";
pub const __FLT_EPSILON__ = 0.000000;
pub const __UINTPTR_WIDTH__ = 64;
pub const __llvm__ = 1;
pub const __UINT_FAST64_MAX__ = c_ulong(18446744073709551615);
pub const __INT_FAST32_FMTi__ = c"i";
pub const __FLT_HAS_INFINITY__ = 1;
pub const __k8 = 1;
pub const __UINT8_FMTx__ = c"hhx";
pub const __INTMAX_C_SUFFIX__ = L;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __INT16_FMTd__ = c"hd";
pub const __UINT32_FMTX__ = c"X";
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const __UINT32_C_SUFFIX__ = U;
pub const __INT32_MAX__ = 2147483647;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __INTMAX_WIDTH__ = 64;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __SIZE_FMTo__ = c"lo";
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __INT_FAST8_FMTi__ = c"hhi";
pub const __UINT_LEAST32_FMTo__ = c"o";
pub const __STDC_UTF_16__ = 1;
pub const __UINT_LEAST32_MAX__ = c_uint(4294967295);
pub const __ATOMIC_RELEASE = 3;
pub const __UINT_FAST16_FMTx__ = c"hx";
pub const __UINTMAX_C_SUFFIX__ = UL;
pub const __FLT_MIN_EXP__ = -125;
pub const __SIZEOF_LONG_DOUBLE__ = 16;
pub const __UINT_LEAST64_FMTu__ = c"lu";
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const __INT_FAST64_FMTd__ = c"ld";
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const __GXX_ABI_VERSION = 1002;
pub const __INT16_TYPE__ = short;
pub const __SSE2_MATH__ = 1;
pub const __FLT_MANT_DIG__ = 24;
pub const __UINT_FAST64_FMTx__ = c"lx";
pub const __STDC__ = 1;
pub const __INT_FAST8_MAX__ = 127;
pub const __INTPTR_FMTd__ = c"ld";
pub const __GNUC_PATCHLEVEL__ = 1;
pub const __SIZE_WIDTH__ = 64;
pub const __UINT_LEAST8_FMTx__ = c"hhx";
pub const __INT_LEAST64_FMTi__ = c"li";
pub const __INT_FAST16_MAX__ = 32767;
pub const __INTPTR_MAX__ = c_long(9223372036854775807);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __UINT64_FMTu__ = c"lu";
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __SSE2__ = 1;
pub const __INT_MAX__ = 2147483647;
pub const __INTMAX_FMTi__ = c"li";
pub const __DBL_DENORM_MIN__ = 0.000000;
pub const __clang_major__ = 7;
pub const __FLT16_MANT_DIG__ = 11;
pub const __GNUC__ = 4;
pub const __UINT32_MAX__ = c_uint(4294967295);
pub const __FLT_DENORM_MIN__ = 0.000000;
pub const __DBL_MAX_EXP__ = 1024;
pub const __INT8_FMTi__ = c"hhi";
pub const __UINT_LEAST16_MAX__ = 65535;
pub const __LDBL_HAS_DENORM__ = 1;
pub const __FLT16_MIN_10_EXP__ = -13;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const __UINT_FAST8_MAX__ = 255;
pub const __DBL_MIN_10_EXP__ = -307;
pub const __UINT8_FMTu__ = c"hhu";
pub const __INT_FAST64_MAX__ = c_long(9223372036854775807);
pub const __UINT16_FMTu__ = c"hu";
pub const __ATOMIC_SEQ_CST = 5;
pub const __SIZE_FMTu__ = c"lu";
pub const __LDBL_MIN_EXP__ = -16381;
pub const __UINT_FAST32_FMTu__ = c"u";
pub const __clang_patchlevel__ = 0;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const __GNUC_STDC_INLINE__ = 1;
pub const __FXSR__ = 1;
pub const __UINT8_MAX__ = 255;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const __UINT32_FMTx__ = c"x";
pub const __UINT16_FMTo__ = c"ho";
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const __UINT32_FMTu__ = c"u";
pub const __SIZEOF_POINTER__ = 8;
pub const __SIZE_MAX__ = c_ulong(18446744073709551615);
pub const __unix = 1;
pub const __INT_FAST16_FMTd__ = c"hd";
pub const unix = 1;
pub const __UINT_LEAST32_FMTu__ = c"u";
pub const __FLT_MAX__ = 340282346999999984391321947108527833088.000000;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __k8__ = 1;
pub const __ATOMIC_CONSUME = 1;
pub const __tune_k8__ = 1;
pub const __unix__ = 1;
pub const __x86_64__ = 1;
pub const __LDBL_HAS_INFINITY__ = 1;
pub const __UINTMAX_FMTx__ = c"lx";
pub const __UINT64_C_SUFFIX__ = UL;
pub const __FLT_MIN_10_EXP__ = -37;
pub const __INT_LEAST16_MAX__ = 32767;
pub const __UINT32_FMTo__ = c"o";
pub const __UINTPTR_FMTo__ = c"lo";
pub const __INT_LEAST16_FMTd__ = c"hd";
pub const __UINTPTR_FMTx__ = c"lx";
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const __INT_LEAST64_FMTd__ = c"ld";
pub const __INT_LEAST16_TYPE__ = short;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __LDBL_MIN_10_EXP__ = -4931;
pub const __INT_LEAST8_MAX__ = 127;
pub const __SIZEOF_INT__ = 4;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __amd64 = 1;
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const __LDBL_MAX_10_EXP__ = 4932;
pub const __SIZEOF_INT128__ = 16;
pub const __UINT_FAST8_FMTx__ = c"hhx";
pub const __linux = 1;
pub const __UINT16_FMTx__ = c"hx";
pub const __UINTPTR_FMTu__ = c"lu";
pub const __UINT_LEAST16_FMTX__ = c"hX";
pub const __amd64__ = 1;
pub const __UINT_FAST32_FMTo__ = c"o";
pub const __linux__ = 1;
pub const __clang__ = 1;
pub const __LP64__ = 1;
pub const __PTRDIFF_FMTi__ = c"li";
pub const __LDBL_DIG__ = 18;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __UINT64_FMTo__ = c"lo";
pub const __INT_FAST32_FMTd__ = c"d";
pub const __ATOMIC_ACQ_REL = 4;
pub const __LONG_LONG_MAX__ = c_longlong(9223372036854775807);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const __INTMAX_MAX__ = c_long(9223372036854775807);
pub const __UINT_LEAST32_FMTx__ = c"x";
pub const __WCHAR_MAX__ = 2147483647;
pub const __INT64_MAX__ = c_long(9223372036854775807);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const __INT_LEAST64_MAX__ = c_long(9223372036854775807);
pub const __UINTMAX_FMTX__ = c"lX";
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const __FLT_HAS_DENORM__ = 1;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __INT32_FMTi__ = c"i";
pub const __DBL_HAS_INFINITY__ = 1;
pub const __FINITE_MATH_ONLY__ = 0;
pub const CBLAS_ORDER = enum_CBLAS_ORDER;
pub const CBLAS_TRANSPOSE = enum_CBLAS_TRANSPOSE;
pub const CBLAS_UPLO = enum_CBLAS_UPLO;
pub const CBLAS_DIAG = enum_CBLAS_DIAG;
pub const CBLAS_SIDE = enum_CBLAS_SIDE;
