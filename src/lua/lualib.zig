pub const struct___va_list_tag = extern struct {
    gp_offset: c_uint,
    fp_offset: c_uint,
    overflow_arg_area: ?*c_void,
    reg_save_area: ?*c_void,
};
pub const __builtin_va_list = [1]struct___va_list_tag;
pub const va_list = __builtin_va_list;
pub const __gnuc_va_list = __builtin_va_list;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong,
    __clang_max_align_nonce2: c_longdouble,
};
pub const struct_lua_State = @OpaqueType();
pub const lua_State = struct_lua_State;
pub const lua_CFunction = ?extern fn(?*lua_State) c_int;
pub const lua_Reader = ?extern fn(?*lua_State, ?*c_void, ?[*]usize) ?[*]const u8;
pub const lua_Writer = ?extern fn(?*lua_State, ?*const c_void, usize, ?*c_void) c_int;
pub const lua_Alloc = ?extern fn(?*c_void, ?*c_void, usize, usize) ?*c_void;
pub const lua_Number = f64;
pub const lua_Integer = ptrdiff_t;
pub extern fn lua_newstate(f: lua_Alloc, ud: ?*c_void) ?*lua_State;
pub extern fn lua_close(L: ?*lua_State) void;
pub extern fn lua_newthread(L: ?*lua_State) ?*lua_State;
pub extern fn lua_atpanic(L: ?*lua_State, panicf: lua_CFunction) lua_CFunction;
pub extern fn lua_gettop(L: ?*lua_State) c_int;
pub extern fn lua_settop(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_pushvalue(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_remove(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_insert(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_replace(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_checkstack(L: ?*lua_State, sz: c_int) c_int;
pub extern fn lua_xmove(from: ?*lua_State, to: ?*lua_State, n: c_int) void;
pub extern fn lua_isnumber(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_isstring(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_iscfunction(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_isuserdata(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_type(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_typename(L: ?*lua_State, tp: c_int) ?[*]const u8;
pub extern fn lua_equal(L: ?*lua_State, idx1: c_int, idx2: c_int) c_int;
pub extern fn lua_rawequal(L: ?*lua_State, idx1: c_int, idx2: c_int) c_int;
pub extern fn lua_lessthan(L: ?*lua_State, idx1: c_int, idx2: c_int) c_int;
pub extern fn lua_tonumber(L: ?*lua_State, idx: c_int) lua_Number;
pub extern fn lua_tointeger(L: ?*lua_State, idx: c_int) lua_Integer;
pub extern fn lua_toboolean(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_tolstring(L: ?*lua_State, idx: c_int, len: ?[*]usize) ?[*]const u8;
pub extern fn lua_objlen(L: ?*lua_State, idx: c_int) usize;
pub extern fn lua_tocfunction(L: ?*lua_State, idx: c_int) lua_CFunction;
pub extern fn lua_touserdata(L: ?*lua_State, idx: c_int) ?*c_void;
pub extern fn lua_tothread(L: ?*lua_State, idx: c_int) ?*lua_State;
pub extern fn lua_topointer(L: ?*lua_State, idx: c_int) ?*const c_void;
pub extern fn lua_pushnil(L: ?*lua_State) void;
pub extern fn lua_pushnumber(L: ?*lua_State, n: lua_Number) void;
pub extern fn lua_pushinteger(L: ?*lua_State, n: lua_Integer) void;
pub extern fn lua_pushlstring(L: ?*lua_State, s: ?[*]const u8, l: usize) void;
pub extern fn lua_pushstring(L: ?*lua_State, s: ?[*]const u8) void;
pub extern fn lua_pushvfstring(L: ?*lua_State, fmt: ?[*]const u8, argp: ?[*]struct___va_list_tag) ?[*]const u8;
pub extern fn lua_pushfstring(L: ?*lua_State, fmt: ?[*]const u8) ?[*]const u8;
pub extern fn lua_pushcclosure(L: ?*lua_State, @"fn": lua_CFunction, n: c_int) void;
pub extern fn lua_pushboolean(L: ?*lua_State, b: c_int) void;
pub extern fn lua_pushlightuserdata(L: ?*lua_State, p: ?*c_void) void;
pub extern fn lua_pushthread(L: ?*lua_State) c_int;
pub extern fn lua_gettable(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_getfield(L: ?*lua_State, idx: c_int, k: ?[*]const u8) void;
pub extern fn lua_rawget(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_rawgeti(L: ?*lua_State, idx: c_int, n: c_int) void;
pub extern fn lua_createtable(L: ?*lua_State, narr: c_int, nrec: c_int) void;
pub extern fn lua_newuserdata(L: ?*lua_State, sz: usize) ?*c_void;
pub extern fn lua_getmetatable(L: ?*lua_State, objindex: c_int) c_int;
pub extern fn lua_getfenv(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_settable(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_setfield(L: ?*lua_State, idx: c_int, k: ?[*]const u8) void;
pub extern fn lua_rawset(L: ?*lua_State, idx: c_int) void;
pub extern fn lua_rawseti(L: ?*lua_State, idx: c_int, n: c_int) void;
pub extern fn lua_setmetatable(L: ?*lua_State, objindex: c_int) c_int;
pub extern fn lua_setfenv(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_call(L: ?*lua_State, nargs: c_int, nresults: c_int) void;
pub extern fn lua_pcall(L: ?*lua_State, nargs: c_int, nresults: c_int, errfunc: c_int) c_int;
pub extern fn lua_cpcall(L: ?*lua_State, func: lua_CFunction, ud: ?*c_void) c_int;
pub extern fn lua_load(L: ?*lua_State, reader: lua_Reader, dt: ?*c_void, chunkname: ?[*]const u8) c_int;
pub extern fn lua_dump(L: ?*lua_State, writer: lua_Writer, data: ?*c_void) c_int;
pub extern fn lua_yield(L: ?*lua_State, nresults: c_int) c_int;
pub extern fn lua_resume(L: ?*lua_State, narg: c_int) c_int;
pub extern fn lua_status(L: ?*lua_State) c_int;
pub extern fn lua_gc(L: ?*lua_State, what: c_int, data: c_int) c_int;
pub extern fn lua_error(L: ?*lua_State) c_int;
pub extern fn lua_next(L: ?*lua_State, idx: c_int) c_int;
pub extern fn lua_concat(L: ?*lua_State, n: c_int) void;
pub extern fn lua_getallocf(L: ?*lua_State, ud: ?[*](?*c_void)) lua_Alloc;
pub extern fn lua_setallocf(L: ?*lua_State, f: lua_Alloc, ud: ?*c_void) void;
pub extern fn lua_setlevel(from: ?*lua_State, to: ?*lua_State) void;
pub const struct_lua_Debug = extern struct {
    event: c_int,
    name: ?[*]const u8,
    namewhat: ?[*]const u8,
    what: ?[*]const u8,
    source: ?[*]const u8,
    currentline: c_int,
    nups: c_int,
    linedefined: c_int,
    lastlinedefined: c_int,
    short_src: [60]u8,
    i_ci: c_int,
};
pub const lua_Debug = struct_lua_Debug;
pub const lua_Hook = ?extern fn(?*lua_State, ?[*]lua_Debug) void;
pub extern fn lua_getstack(L: ?*lua_State, level: c_int, ar: ?[*]lua_Debug) c_int;
pub extern fn lua_getinfo(L: ?*lua_State, what: ?[*]const u8, ar: ?[*]lua_Debug) c_int;
pub extern fn lua_getlocal(L: ?*lua_State, ar: ?[*]const lua_Debug, n: c_int) ?[*]const u8;
pub extern fn lua_setlocal(L: ?*lua_State, ar: ?[*]const lua_Debug, n: c_int) ?[*]const u8;
pub extern fn lua_getupvalue(L: ?*lua_State, funcindex: c_int, n: c_int) ?[*]const u8;
pub extern fn lua_setupvalue(L: ?*lua_State, funcindex: c_int, n: c_int) ?[*]const u8;
pub extern fn lua_sethook(L: ?*lua_State, func: lua_Hook, mask: c_int, count: c_int) c_int;
pub extern fn lua_gethook(L: ?*lua_State) lua_Hook;
pub extern fn lua_gethookmask(L: ?*lua_State) c_int;
pub extern fn lua_gethookcount(L: ?*lua_State) c_int;
pub extern fn lua_upvalueid(L: ?*lua_State, idx: c_int, n: c_int) ?*c_void;
pub extern fn lua_upvaluejoin(L: ?*lua_State, idx1: c_int, n1: c_int, idx2: c_int, n2: c_int) void;
pub extern fn lua_loadx(L: ?*lua_State, reader: lua_Reader, dt: ?*c_void, chunkname: ?[*]const u8, mode: ?[*]const u8) c_int;
pub extern fn luaopen_base(L: ?*lua_State) c_int;
pub extern fn luaopen_math(L: ?*lua_State) c_int;
pub extern fn luaopen_string(L: ?*lua_State) c_int;
pub extern fn luaopen_table(L: ?*lua_State) c_int;
pub extern fn luaopen_io(L: ?*lua_State) c_int;
pub extern fn luaopen_os(L: ?*lua_State) c_int;
pub extern fn luaopen_package(L: ?*lua_State) c_int;
pub extern fn luaopen_debug(L: ?*lua_State) c_int;
pub extern fn luaopen_bit(L: ?*lua_State) c_int;
pub extern fn luaopen_jit(L: ?*lua_State) c_int;
pub extern fn luaopen_ffi(L: ?*lua_State) c_int;
pub extern fn luaL_openlibs(L: ?*lua_State) void;
pub const SCHAR_MAX = __SCHAR_MAX__;
pub const LUA_GCCOUNTB = 4;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const _STDC_PREDEF_H = 1;
pub const __GNUC_VA_LIST = 1;
pub const __FLT16_MAX_EXP__ = 15;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const LLONG_MIN = if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(-LLONG_MAX, -1) else if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(-LLONG_MAX, -1) else (-LLONG_MAX)(-1);
pub const _POSIX2_BC_BASE_MAX = 99;
pub const __INT64_FMTd__ = c"ld";
pub const __STDC_VERSION__ = c_long(201112);
pub const __SIZEOF_FLOAT__ = 4;
pub const __INT_LEAST32_FMTi__ = c"i";
pub const __INT_LEAST8_FMTi__ = c"hhi";
pub const __LDBL_EPSILON__ = 0.000000;
pub const __INT_LEAST32_FMTd__ = c"d";
pub const __STDC_UTF_32__ = 1;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const __UINT_FAST64_FMTX__ = c"lX";
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __clang_version__ = c"7.0.0 (tags/RELEASE_700/final)";
pub const __UINT_LEAST8_FMTo__ = c"hho";
pub const _POSIX_SSIZE_MAX = 32767;
pub const __SIZEOF_DOUBLE__ = 8;
pub const __INTMAX_FMTd__ = c"ld";
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __INT_LEAST16_FMTi__ = c"hi";
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __MMX__ = 1;
pub const LUA_MULTRET = -1;
pub const LUA_LMULTILIB = c"lib";
pub const __SIZE_FMTX__ = c"lX";
pub const _POSIX_MAX_CANON = 255;
pub const _POSIX2_RE_DUP_MAX = 255;
pub const __USING_NAMESPACE_C99 = name;
pub const LUA_EXECDIR = c"!";
pub const __ptr_t = [*]void;
pub const __WCHAR_WIDTH__ = 32;
pub const __STDC_IEC_559_COMPLEX__ = 1;
pub const HOST_NAME_MAX = 64;
pub const _POSIX_AIO_LISTIO_MAX = 2;
pub const __USE_MISC = 1;
pub const LOGIN_NAME_MAX = 256;
pub const __DBL_MIN_EXP__ = -1021;
pub const __PTRDIFF_FMTd__ = c"ld";
pub const LUA_LROOT = c"/usr/local";
pub const __FLT_EVAL_METHOD__ = 0;
pub const __SSE_MATH__ = 1;
pub const LUA_MINSTACK = 20;
pub const __UINT_FAST8_FMTo__ = c"hho";
pub const __UINT_LEAST64_MAX__ = c_ulong(18446744073709551615);
pub const LUA_HOOKCOUNT = 3;
pub const __UINT_LEAST64_FMTx__ = c"lx";
pub const LUA_IOLIBNAME = c"io";
pub const __INT8_MAX__ = 127;
pub const __DBL_HAS_DENORM__ = 1;
pub const __FLOAT128__ = 1;
pub const __FLT16_HAS_QUIET_NAN__ = 1;
pub const __ATOMIC_RELAXED = 0;
pub const __DBL_DECIMAL_DIG__ = 17;
pub const LUA_FILEHANDLE = c"FILE*";
pub const __SIZEOF_SHORT__ = 2;
pub const _POSIX2_BC_SCALE_MAX = 99;
pub const __UINT_FAST16_MAX__ = 65535;
pub const __UINT16_FMTX__ = c"hX";
pub const TTY_NAME_MAX = 32;
pub const LONG_MIN = if (@typeId(@typeOf(-c_long(1))) == @import("builtin").TypeId.Pointer) @ptrCast(-__LONG_MAX__, -c_long(1)) else if (@typeId(@typeOf(-c_long(1))) == @import("builtin").TypeId.Int) @intToPtr(-__LONG_MAX__, -c_long(1)) else (-__LONG_MAX__)(-c_long(1));
pub const PIPE_BUF = 4096;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const LUAI_GCPAUSE = 200;
pub const _SYS_CDEFS_H = 1;
pub const _ATFILE_SOURCE = 1;
pub const __WINT_MAX__ = c_uint(4294967295);
pub const __LDBL_MAX_EXP__ = 16384;
pub const __USE_POSIX199309 = 1;
pub const __STDC_ISO_10646__ = c_long(201605);
pub const __NO_MATH_INLINES = 1;
pub const __WCHAR_TYPE__ = int;
pub const RE_DUP_MAX = 32767;
pub const __LONG_MAX__ = c_long(9223372036854775807);
pub const __STDC_HOSTED__ = 1;
pub const MAX_INPUT = 255;
pub const __INT_FAST16_FMTi__ = c"hi";
pub const __PTRDIFF_WIDTH__ = 64;
pub const __INT_LEAST32_TYPE__ = int;
pub const __SCHAR_MAX__ = 127;
pub const __USE_POSIX2 = 1;
pub const __LDBL_DENORM_MIN__ = 0.000000;
pub const LUA_GCSTEP = 5;
pub const lua_Chunkreader = lua_Reader;
pub const __FLT16_MIN_EXP__ = -14;
pub const __USE_XOPEN2K = 1;
pub const __USE_FORTIFY_LEVEL = 0;
pub const __INT64_C_SUFFIX__ = L;
pub const __ELF__ = 1;
pub const __LDBL_MANT_DIG__ = 64;
pub const BC_BASE_MAX = _POSIX2_BC_BASE_MAX;
pub const __USE_XOPEN2K8 = 1;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const LUA_PATH_MARK = c"?";
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const SCHAR_MIN = if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(-__SCHAR_MAX__, -1) else if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(-__SCHAR_MAX__, -1) else (-__SCHAR_MAX__)(-1);
pub const LUAI_MAXCSTACK = 8000;
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const __USE_ATFILE = 1;
pub const __UINT64_FMTX__ = c"lX";
pub const LUA_TNIL = 0;
pub const __UINT64_MAX__ = c_ulong(18446744073709551615);
pub const LUA_ERRSYNTAX = 3;
pub const _POSIX_LINK_MAX = 8;
pub const __DBL_MANT_DIG__ = 53;
pub const _POSIX_CLOCKRES_MIN = 20000000;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const _BITS_POSIX2_LIM_H = 1;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __DBL_DIG__ = 15;
pub const LUA_LUADIR = c"/lua/5.1/";
pub const __ATOMIC_ACQUIRE = 2;
pub const PTHREAD_STACK_MIN = 16384;
pub const _LIBC_LIMITS_H_ = 1;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const __USE_ISOC95 = 1;
pub const __FLT16_HAS_DENORM__ = 1;
pub const _POSIX_RE_DUP_MAX = 255;
pub const LUA_COLIBNAME = c"coroutine";
pub const SHRT_MAX = __SHRT_MAX__;
pub const __UINT_FAST16_FMTu__ = c"hu";
pub const __INTPTR_FMTi__ = c"li";
pub const LUA_TABLIBNAME = c"table";
pub const __UINT_FAST8_FMTX__ = c"hhX";
pub const __LITTLE_ENDIAN__ = 1;
pub const __SSE__ = 1;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const __SIZEOF_SIZE_T__ = 8;
pub const SHRT_MIN = if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(-__SHRT_MAX__, -1) else if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(-__SHRT_MAX__, -1) else (-__SHRT_MAX__)(-1);
pub const __UINT_LEAST16_FMTo__ = c"ho";
pub const _POSIX_ARG_MAX = 4096;
pub const LUAI_MAXSTACK = 65500;
pub const __UINT8_FMTo__ = c"hho";
pub const LUA_INTFRM_T = long;
pub const __UINT_LEAST16_FMTx__ = c"hx";
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __UINT_FAST16_FMTX__ = c"hX";
pub const __VERSION__ = c"4.2.1 Compatible Clang 7.0.0 (tags/RELEASE_700/final)";
pub const __UINT_FAST32_FMTx__ = c"x";
pub const __UINTPTR_MAX__ = c_ulong(18446744073709551615);
pub const __UINT_FAST8_FMTu__ = c"hhu";
pub const __UINT_LEAST8_FMTu__ = c"hhu";
pub const __UINT_LEAST64_FMTo__ = c"lo";
pub const PATH_MAX = 4096;
pub const LUA_TSTRING = 4;
pub const __UINT_LEAST8_MAX__ = 255;
pub const _POSIX2_EXPR_NEST_MAX = 32;
pub const __warnattr = msg;
pub const __SIZEOF_WCHAR_T__ = 4;
pub const __LDBL_MAX__ = inf;
pub const __UINT16_MAX__ = 65535;
pub const LUA_MAXCAPTURES = 32;
pub const _LP64 = 1;
pub const __x86_64 = 1;
pub const _POSIX2_COLL_WEIGHTS_MAX = 2;
pub const LUA_HOOKRET = 1;
pub const linux = 1;
pub const __SIZEOF_WINT_T__ = 4;
pub const LUA_HOOKTAILRET = 4;
pub const __UINTMAX_FMTo__ = c"lo";
pub const __FLT_DIG__ = 6;
pub const __UINT_LEAST8_FMTX__ = c"hhX";
pub const LUA_REGISTRYINDEX = -10000;
pub const __INT16_MAX__ = 32767;
pub const __WINT_UNSIGNED__ = 1;
pub const _POSIX_HOST_NAME_MAX = 255;
pub const XATTR_NAME_MAX = 255;
pub const __FLT_MAX_10_EXP__ = 38;
pub const _FEATURES_H = 1;
pub const __UINT_LEAST16_FMTu__ = c"hu";
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const __UINTPTR_FMTX__ = c"lX";
pub const __WINT_WIDTH__ = 32;
pub const __SHRT_MAX__ = 32767;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub const LUA_RELEASE = c"Lua 5.1.4";
pub const __POINTER_WIDTH__ = 64;
pub const __PTRDIFF_MAX__ = c_long(9223372036854775807);
pub const __INT32_FMTd__ = c"d";
pub const __FLT16_DIG__ = 3;
pub const __DBL_MIN__ = 0.000000;
pub const _POSIX_TIMER_MAX = 32;
pub const __SIZEOF_LONG__ = 8;
pub const __INTPTR_WIDTH__ = 64;
pub const __FLT16_MAX_10_EXP__ = 4;
pub const __INT_FAST32_TYPE__ = int;
pub const LUA_VERSION_NUM = 501;
pub const __NO_INLINE__ = 1;
pub const __UINT_FAST32_FMTX__ = c"X";
pub const _POSIX_SOURCE = 1;
pub const INT_MAX = __INT_MAX__;
pub const __gnu_linux__ = 1;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const __UINTMAX_FMTu__ = c"lu";
pub const PTHREAD_DESTRUCTOR_ITERATIONS = _POSIX_THREAD_DESTRUCTOR_ITERATIONS;
pub const LUA_DBLIBNAME = c"debug";
pub const NGROUPS_MAX = 65536;
pub const LUA_TUSERDATA = 7;
pub const __FLT_RADIX__ = 2;
pub const _POSIX2_BC_DIM_MAX = 2048;
pub const __GLIBC_MINOR__ = 24;
pub const LUA_ENVIRONINDEX = -10001;
pub const __FLT16_HAS_INFINITY__ = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const AIO_PRIO_DELTA_MAX = 20;
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const LUA_NUMBER_FMT = c"%.14g";
pub const LUAI_MAXNUMBER2STR = 32;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const _POSIX_THREAD_KEYS_MAX = 128;
pub const __FLT16_DECIMAL_DIG__ = 5;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const __INT_FAST8_FMTd__ = c"hhd";
pub const __INT32_TYPE__ = int;
pub const __USE_POSIX199506 = 1;
pub const _POSIX_LOGIN_NAME_MAX = 9;
pub const LUA_GCCOUNT = 3;
pub const __UINTMAX_WIDTH__ = 64;
pub const __FLT_MIN__ = 0.000000;
pub const __INT64_FMTi__ = c"li";
pub const __UINT_FAST64_FMTu__ = c"lu";
pub const __INT8_FMTd__ = c"hhd";
pub const _POSIX_TZNAME_MAX = 6;
pub const __INT_FAST16_TYPE__ = short;
pub const __FLT_MAX_EXP__ = 128;
pub const __DBL_MAX_10_EXP__ = 308;
pub const __LDBL_MIN__ = 0.000000;
pub const LUA_TLIGHTUSERDATA = 2;
pub const __INT_FAST64_FMTi__ = c"li";
pub const __INT_LEAST8_FMTd__ = c"hhd";
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const __UINT_LEAST32_FMTX__ = c"X";
pub const _POSIX_MQ_PRIO_MAX = 32;
pub const MQ_PRIO_MAX = 32768;
pub const __UINTMAX_MAX__ = c_ulong(18446744073709551615);
pub const __UINT_FAST16_FMTo__ = c"ho";
pub const _POSIX_NAME_MAX = 14;
pub const _DEFAULT_SOURCE = 1;
pub const __LDBL_DECIMAL_DIG__ = 21;
pub const __UINT_LEAST64_FMTX__ = c"lX";
pub const __clang_minor__ = 0;
pub const __LDBL_REDIR_DECL = name;
pub const COLL_WEIGHTS_MAX = 255;
pub const __SIZEOF_FLOAT128__ = 16;
pub const BC_DIM_MAX = _POSIX2_BC_DIM_MAX;
pub const _POSIX_PATH_MAX = 256;
pub const __UINT_FAST64_FMTo__ = c"lo";
pub const __SIZE_FMTx__ = c"lx";
pub const _POSIX_SYMLINK_MAX = 255;
pub const MB_LEN_MAX = 16;
pub const __DBL_MAX__ = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878;
pub const _POSIX_OPEN_MAX = 20;
pub const LUA_IGMARK = c"-";
pub const LINK_MAX = 127;
pub const __DBL_EPSILON__ = 0.000000;
pub const __UINT64_FMTx__ = c"lx";
pub const LUA_BITLIBNAME = c"bit";
pub const LUA_LOADLIBNAME = c"package";
pub const LUA_NUMBER_SCAN = c"%lf";
pub const __CHAR_BIT__ = 8;
pub const LUA_INTFRMLEN = c"l";
pub const __INT16_FMTi__ = c"hi";
pub const _DEBUG = 1;
pub const __GNUC_MINOR__ = 2;
pub const __restrict_arr = __restrict;
pub const __UINT_FAST32_MAX__ = c_uint(4294967295);
pub const LUA_GCSTOP = 0;
pub const __UINT8_FMTX__ = c"hhX";
pub const __FLT_EPSILON__ = 0.000000;
pub const _POSIX_NGROUPS_MAX = 8;
pub const __UINTPTR_WIDTH__ = 64;
pub const __llvm__ = 1;
pub const __UINT_FAST64_MAX__ = c_ulong(18446744073709551615);
pub const LUA_ERRRUN = 2;
pub const __INT_FAST32_FMTi__ = c"i";
pub const LUALIB_API = LUA_API;
pub const NR_OPEN = 1024;
pub const __FLT_HAS_INFINITY__ = 1;
pub const __k8 = 1;
pub const NULL = if (@typeId(@typeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast([*]void, 0) else if (@typeId(@typeOf(0)) == @import("builtin").TypeId.Int) @intToPtr([*]void, 0) else ([*]void)(0);
pub const __UINT8_FMTx__ = c"hhx";
pub const XATTR_SIZE_MAX = 65536;
pub const __INTMAX_C_SUFFIX__ = L;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const LUA_TTHREAD = 8;
pub const __INT16_FMTd__ = c"hd";
pub const LUA_JITLIBNAME = c"jit";
pub const __UINT32_FMTX__ = c"X";
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const __UINT32_C_SUFFIX__ = U;
pub const __INT32_MAX__ = 2147483647;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const __INTMAX_WIDTH__ = 64;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const __USE_POSIX = 1;
pub const __SIZE_FMTo__ = c"lo";
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const BC_STRING_MAX = _POSIX2_BC_STRING_MAX;
pub const LUAI_GCMUL = 200;
pub const LUA_INIT = c"LUA_INIT";
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;
pub const __INT_FAST8_FMTi__ = c"hhi";
pub const __UINT_LEAST32_FMTo__ = c"o";
pub const __STDC_UTF_16__ = 1;
pub const LUA_GLOBALSINDEX = -10002;
pub const __UINT_LEAST32_MAX__ = c_uint(4294967295);
pub const __ATOMIC_RELEASE = 3;
pub const __UINTMAX_C_SUFFIX__ = UL;
pub const __UINT_FAST16_FMTx__ = c"hx";
pub const __FLT_MIN_EXP__ = -125;
pub const LUA_DIRSEP = c"/";
pub const LUA_TTABLE = 5;
pub const __SIZEOF_LONG_DOUBLE__ = 16;
pub const __UINT_LEAST64_FMTu__ = c"lu";
pub const LUA_COPYRIGHT = c"Copyright (C) 1994-2008 Lua.org, PUC-Rio";
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const LUA_INTEGER = ptrdiff_t;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const __INT_FAST64_FMTd__ = c"ld";
pub const _POSIX_MAX_INPUT = 255;
pub const __STDC_NO_THREADS__ = 1;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const LUA_GCCOLLECT = 2;
pub const __USING_NAMESPACE_STD = name;
pub const _POSIX_TTY_NAME_MAX = 9;
pub const CHAR_BIT = __CHAR_BIT__;
pub const __INT16_TYPE__ = short;
pub const __GXX_ABI_VERSION = 1002;
pub const __SSE2_MATH__ = 1;
pub const __FLT_MANT_DIG__ = 24;
pub const EXPR_NEST_MAX = _POSIX2_EXPR_NEST_MAX;
pub const __UINT_FAST64_FMTx__ = c"lx";
pub const __STDC__ = 1;
pub const __INT_FAST8_MAX__ = 127;
pub const __INTPTR_FMTd__ = c"ld";
pub const __GNUC_PATCHLEVEL__ = 1;
pub const RTSIG_MAX = 32;
pub const __SIZE_WIDTH__ = 64;
pub const __UINT_LEAST8_FMTx__ = c"hhx";
pub const __INT_LEAST64_FMTi__ = c"li";
pub const LUA_CPATH = c"LUA_CPATH";
pub const __STDC_IEC_559__ = 1;
pub const LUA_IDSIZE = 60;
pub const __INT_FAST16_MAX__ = 32767;
pub const __USE_ISOC99 = 1;
pub const __INTPTR_MAX__ = c_long(9223372036854775807);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const __UINT64_FMTu__ = c"lu";
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __SSE2__ = 1;
pub const LUA_AUTHORS = c"R. Ierusalimschy, L. H. de Figueiredo & W. Celes";
pub const __INT_MAX__ = 2147483647;
pub const __INTMAX_FMTi__ = c"li";
pub const __DBL_DENORM_MIN__ = 0.000000;
pub const __clang_major__ = 7;
pub const __FLT16_MANT_DIG__ = 11;
pub const __GNUC__ = 4;
pub const XATTR_LIST_MAX = 65536;
pub const INT_MIN = if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(-__INT_MAX__, -1) else if (@typeId(@typeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(-__INT_MAX__, -1) else (-__INT_MAX__)(-1);
pub const __UINT32_MAX__ = c_uint(4294967295);
pub const LUA_PATH = c"LUA_PATH";
pub const LUA_GCSETSTEPMUL = 7;
pub const _POSIX_C_SOURCE = c_long(200809);
pub const __FLT_DENORM_MIN__ = 0.000000;
pub const __DBL_MAX_EXP__ = 1024;
pub const __INT8_FMTi__ = c"hhi";
pub const LUA_STRLIBNAME = c"string";
pub const __UINT_LEAST16_MAX__ = 65535;
pub const __LDBL_HAS_DENORM__ = 1;
pub const __FLT16_MIN_10_EXP__ = -13;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const WINVER = 1281;
pub const LUA_TNONE = -1;
pub const lua_Chunkwriter = lua_Writer;
pub const __UINT_FAST8_MAX__ = 255;
pub const LONG_MAX = __LONG_MAX__;
pub const __DBL_MIN_10_EXP__ = -307;
pub const __UINT8_FMTu__ = c"hhu";
pub const LUA_GCRESTART = 1;
pub const CHAR_MAX = __SCHAR_MAX__;
pub const _POSIX_THREAD_THREADS_MAX = 64;
pub const LUA_TFUNCTION = 6;
pub const __INT_FAST64_MAX__ = c_long(9223372036854775807);
pub const __UINT16_FMTu__ = c"hu";
pub const __ATOMIC_SEQ_CST = 5;
pub const __SIZE_FMTu__ = c"lu";
pub const __LDBL_MIN_EXP__ = -16381;
pub const __UINT_FAST32_FMTu__ = c"u";
pub const LUA_LJDIR = c"/luajit-2.0.4/";
pub const __clang_patchlevel__ = 0;
pub const _POSIX_PIPE_BUF = 512;
pub const _POSIX_SEM_NSEMS_MAX = 256;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const MAX_CANON = 255;
pub const LUA_MULTILIB = c"lib";
pub const __GNUC_STDC_INLINE__ = 1;
pub const __FXSR__ = 1;
pub const SEM_VALUE_MAX = 2147483647;
pub const LUA_NUMBER = double;
pub const __UINT8_MAX__ = 255;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const __UINT32_FMTx__ = c"x";
pub const __UINT16_FMTo__ = c"ho";
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const __UINT32_FMTu__ = c"u";
pub const __SIZEOF_POINTER__ = 8;
pub const __SIZE_MAX__ = c_ulong(18446744073709551615);
pub const __unix = 1;
pub const __INT_FAST16_FMTd__ = c"hd";
pub const unix = 1;
pub const __UINT_LEAST32_FMTu__ = c"u";
pub const __FLT_MAX__ = 340282346999999984391321947108527833088.000000;
pub const _POSIX_MQ_OPEN_MAX = 8;
pub const __USE_ISOC11 = 1;
pub const LUAI_UACNUMBER = double;
pub const _POSIX_STREAM_MAX = 8;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const __k8__ = 1;
pub const LUA_ERRMEM = 4;
pub const __ATOMIC_CONSUME = 1;
pub const __tune_k8__ = 1;
pub const __unix__ = 1;
pub const _POSIX2_CHARCLASS_NAME_MAX = 14;
pub const __x86_64__ = 1;
pub const __LDBL_HAS_INFINITY__ = 1;
pub const __WORDSIZE_TIME64_COMPAT32 = 1;
pub const __UINTMAX_FMTx__ = c"lx";
pub const __UINT64_C_SUFFIX__ = UL;
pub const __GNU_LIBRARY__ = 6;
pub const __FLT_MIN_10_EXP__ = -37;
pub const __INT_LEAST16_MAX__ = 32767;
pub const ARG_MAX = 131072;
pub const LUA_VERSION = c"Lua 5.1";
pub const __UINT32_FMTo__ = c"o";
pub const __UINTPTR_FMTo__ = c"lo";
pub const __INT_LEAST16_FMTd__ = c"hd";
pub const __UINTPTR_FMTx__ = c"lx";
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const LUA_SIGNATURE = c"\x1bLua";
pub const __INT_LEAST64_FMTd__ = c"ld";
pub const __INT_LEAST16_TYPE__ = short;
pub const LUA_HOOKLINE = 2;
pub const LUA_HOOKCALL = 0;
pub const SSIZE_MAX = LONG_MAX;
pub const __attribute_alloc_size__ = params;
pub const LUA_FFILIBNAME = c"ffi";
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const __LDBL_MIN_10_EXP__ = -4931;
pub const __INT_LEAST8_MAX__ = 127;
pub const _POSIX2_BC_STRING_MAX = 1000;
pub const LUA_YIELD = 1;
pub const __SIZEOF_INT__ = 4;
pub const __USE_POSIX_IMPLICITLY = 1;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const _POSIX_DELAYTIMER_MAX = 32;
pub const BC_SCALE_MAX = _POSIX2_BC_SCALE_MAX;
pub const LUA_TNUMBER = 3;
pub const __amd64 = 1;
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const LLONG_MAX = __LONG_LONG_MAX__;
pub const __LDBL_MAX_10_EXP__ = 4932;
pub const __SIZEOF_INT128__ = 16;
pub const __UINT_FAST8_FMTx__ = c"hhx";
pub const LUA_JROOT = LUA_LROOT;
pub const LUA_GCSETPAUSE = 6;
pub const CHAR_MIN = SCHAR_MIN;
pub const __linux = 1;
pub const __UINT16_FMTx__ = c"hx";
pub const __UINTPTR_FMTu__ = c"lu";
pub const __UINT_LEAST16_FMTX__ = c"hX";
pub const __amd64__ = 1;
pub const __UINT_FAST32_FMTo__ = c"o";
pub const __linux__ = 1;
pub const __clang__ = 1;
pub const __LP64__ = 1;
pub const __SYSCALL_WORDSIZE = 64;
pub const __PTRDIFF_FMTi__ = c"li";
pub const _POSIX_RTSIG_MAX = 8;
pub const __LDBL_DIG__ = 18;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const _BITS_POSIX1_LIM_H = 1;
pub const __UINT64_FMTo__ = c"lo";
pub const __INT_FAST32_FMTd__ = c"d";
pub const _POSIX_CHILD_MAX = 25;
pub const __ATOMIC_ACQ_REL = 4;
pub const LUA_MATHLIBNAME = c"math";
pub const __LONG_LONG_MAX__ = c_longlong(9223372036854775807);
pub const _POSIX_SYMLOOP_MAX = 8;
pub const _POSIX_SIGQUEUE_MAX = 32;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const _POSIX_SEM_VALUE_MAX = 32767;
pub const CHARCLASS_NAME_MAX = 2048;
pub const __GLIBC__ = 2;
pub const LUA_TBOOLEAN = 1;
pub const LUA_PATHSEP = c";";
pub const __INTMAX_MAX__ = c_long(9223372036854775807);
pub const __UINT_LEAST32_FMTx__ = c"x";
pub const __WORDSIZE = 64;
pub const __WCHAR_MAX__ = 2147483647;
pub const __INT64_MAX__ = c_long(9223372036854775807);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const LUA_API = @"extern";
pub const __INT_LEAST64_MAX__ = c_long(9223372036854775807);
pub const __UINTMAX_FMTX__ = c"lX";
pub const LUA_ERRERR = 5;
pub const PTHREAD_KEYS_MAX = 1024;
pub const LINE_MAX = _POSIX2_LINE_MAX;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const LUA_OSLIBNAME = c"os";
pub const __FLT_HAS_DENORM__ = 1;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const _POSIX_AIO_MAX = 1;
pub const _POSIX2_LINE_MAX = 2048;
pub const NAME_MAX = 255;
pub const DELAYTIMER_MAX = 2147483647;
pub const __INT32_FMTi__ = c"i";
pub const __DBL_HAS_INFINITY__ = 1;
pub const __FINITE_MATH_ONLY__ = 0;
pub const __va_list_tag = struct___va_list_tag;
